/*
 * This file is generated by jOOQ.
*/
package cricketScorer.db.gen.tables;


import cricketScorer.db.gen.Indexes;
import cricketScorer.db.gen.Public;
import cricketScorer.db.gen.tables.records.PlayersRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Players extends TableImpl<PlayersRecord> {

    private static final long serialVersionUID = 59325723;

    /**
     * The reference instance of <code>public.PLAYERS</code>
     */
    public static final Players PLAYERS = new Players();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayersRecord> getRecordType() {
        return PlayersRecord.class;
    }

    /**
     * The column <code>public.PLAYERS.ID</code>.
     */
    public final TableField<PlayersRecord, UUID> ID = createField("ID", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.PLAYERS.NAME</code>.
     */
    public final TableField<PlayersRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.PLAYERS.TEAM_NAME</code>.
     */
    public final TableField<PlayersRecord, String> TEAM_NAME = createField("TEAM_NAME", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * Create a <code>public.PLAYERS</code> table reference
     */
    public Players() {
        this(DSL.name("PLAYERS"), null);
    }

    /**
     * Create an aliased <code>public.PLAYERS</code> table reference
     */
    public Players(String alias) {
        this(DSL.name(alias), PLAYERS);
    }

    /**
     * Create an aliased <code>public.PLAYERS</code> table reference
     */
    public Players(Name alias) {
        this(alias, PLAYERS);
    }

    private Players(Name alias, Table<PlayersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Players(Name alias, Table<PlayersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_D, Indexes.PRIMARY_KEY_D);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Players as(String alias) {
        return new Players(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Players as(Name alias) {
        return new Players(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Players rename(String name) {
        return new Players(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Players rename(Name name) {
        return new Players(name, null);
    }
}
